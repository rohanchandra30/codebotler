{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}]}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}]}
{"name": "LunchBreak-2", "prompt": "Go to Alice\u2019s and Bob\u2019s offices and ask each of them if they are up for lunch. If they say yes, tell them that we will meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}]}
{"name": "LunchBreak-3", "prompt": "Ask Alice and Bob if they are up for lunch. If they say yes, tell them that we will meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}]}
{"name": "LunchBreak-4", "prompt": "Go to Alice\u2019s office and ask her if she is free for lunch. If she says yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who will join for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}]}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}]}
{"name": "StaplerSupply-1", "prompt": "Go to every printer room and check to see if there is a stapler. Come back and tell me which printer rooms do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}]}
{"name": "StaplerSupply-2", "prompt": "Find all printer rooms that do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}]}
{"name": "StaplerSupply-3", "prompt": "Check all printer rooms for staplers, and come back and tell me which ones do not have any staplers.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}]}
{"name": "StaplerSupply-4", "prompt": "Tell me the name of every printer room that does not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}]}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}]}
{"name": "ElevatorTour-1", "prompt": "Go to the elevator, and wait until someone shows up. Ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and wish them an enjoyable visit.", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}]}
{"name": "ElevatorTour-2", "prompt": "Go to the elevator and wait for someone to arrive. Inquire if they are here for the tour, and if they say yes, welcome them to the university and ask them to follow you. Then take them to the main conference room. If they say no, wait for someone else. When you get to the conference room, announce your arrival at the conference room and wish them an enjoyable visit.", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}]}
{"name": "ElevatorTour-3", "prompt": "Go to the elevator and wait for a person to show up. When someone shows up, ask them if they are here for the tour, and if they say yes, welcome them to the university and ask them to follow you. Then take them to the main conference room. If they say no, wait for the next person. When you get to the conference room, announce your arrival at the conference room and wish them an enjoyable visit.", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}]}
{"name": "ElevatorTour-4", "prompt": "Go to the elevator, wait until someone arrives, and then ask them if they are here for the tour. If they say yes, welcome them to the university and ask them to follow you, and guide them to the main conference room. If they say no, wait for the next person. When you get to the conference room, announce your arrival at the conference room and wish them an enjoyable visit.", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}]}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "test": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}]}
{"name": "MovieMessenger-1", "prompt": "Ask Sally if she wants to go to the cinema with Mark. Tell Mark what Sally said, and if Sally said yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM, and then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "test": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}]}
{"name": "MovieMessenger-2", "prompt": "Ask Sally if she wants to go to the cinema with Mark. Tell Mark what Sally said, and if yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM. If Sally said yes, go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "test": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}]}
{"name": "MovieMessenger-3", "prompt": "Go to Sally\u2019s office and ask her if she wants to go to the cinema with Mark. Tell Mark what Sally said, and if yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM, and then go back to Sally's office and tell her what Mark said.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "test": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}]}
{"name": "MovieMessenger-4", "prompt": "Ask Sally if she wants to go to the cinema with Mark. Tell Mark what Sally said, and if yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM. Then then go tell Sally what Mark said.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "test": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}]}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate/one chocolates/1 chocolates\", \"1 gummy/one gummy/1 gummies/one gummies\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\n:- not chocolate2.\n\n"}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate/one chocolates/1 chocolates\", \"1 gummy/one gummy/1 gummies/one gummies\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\n:- not chocolate1_gummy1."}]}
{"name": "HalloweenList-1", "prompt": "Go to every office, and if there is a person there, ask them if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate/one chocolates/1 chocolates\", \"1 gummy/one gummy/1 gummies/one gummies\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\n:- not chocolate2.\n\n"}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate/one chocolates/1 chocolates\", \"1 gummy/one gummy/1 gummies/one gummies\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\n:- not chocolate1_gummy1."}]}
{"name": "HalloweenList-2", "prompt": "Check with every occupied office to see if the occupant would like a chocolate, caramel, or gummy. Let me know how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate/one chocolates/1 chocolates\", \"1 gummy/one gummy/1 gummies/one gummies\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\n:- not chocolate2.\n\n"}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate/one chocolates/1 chocolates\", \"1 gummy/one gummy/1 gummies/one gummies\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\n:- not chocolate1_gummy1."}]}
{"name": "HalloweenList-3", "prompt": "Find every occupied office and ask their occupants whether they would like a chocolate, caramel, or gummy. Let me know how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate/one chocolates/1 chocolates\", \"1 gummy/one gummy/1 gummies/one gummies\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\n:- not chocolate2.\n\n"}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate/one chocolates/1 chocolates\", \"1 gummy/one gummy/1 gummies/one gummies\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\n:- not chocolate1_gummy1."}]}
{"name": "HalloweenList-4", "prompt": "Go to every office with a person, and ask them if they would like a chocolate, caramel, or gummy, then come back and tell me how many of each people asked for.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate/one chocolates/1 chocolates\", \"1 gummy/one gummy/1 gummies/one gummies\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\n:- not chocolate2.\n\n"}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate/one chocolates/1 chocolates\", \"1 gummy/one gummy/1 gummies/one gummies\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\n:- not chocolate1_gummy1."}]}
