{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen, ask if there is a mug in the fridge, and come back and tell me if there is a mug in the fridge"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"Alice and Bob are joining for lunch\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")\n    go_to(start_loc)\n    list_of_people = []\n    for person in [\"Alice\", \"Bob\"]:\n        if is_in_room(person):\n            list_of_people.append(person)\n    say(\"The following people are joining for lunch: \" + \", \".join(list_of_people))\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"Alice and Bob are joining for lunch\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")\n    go_to(start_loc)\n    list_of_people = []\n    for person in [\"Alice\", \"Bob\"]:\n        if is_in_room(person):\n            list_of_people.append(person)\n    say(\"The following people are joining for lunch: \" + \", \".join(list_of_people))\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"Alice and Bob are joining for lunch\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")\n    go_to(start_loc)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    response = ask(\"Alice\", \"Who else is joining for lunch?\", [\"Bob\", \"Carol\"])\n    say(\"Alice said: \" + response)\n    response = ask(\"Bob\", \"Who else is joining for lunch?\", [\"Alice\", \"Carol\"])\n    say(\"Bob said: \" + response)\n\n#  \nAsk if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch."}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"Alice is joining us for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"Bob is joining us for lunch\")\n    go_to(start_loc)\n    say(\"We are joining the following people for lunch: Alice, Bob\")\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"Alice and Bob are joining for lunch\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")\n    go_to(start_loc)\n    list_of_people = []\n    for person in [\"Alice\", \"Bob\"]:\n        if is_in_room(person):\n            list_of_people.append(person)\n    say(\"The following people are joining for lunch: \" + \", \".join(list_of_people))\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"Alice and Bob are joining for lunch\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")\n    go_to(start_loc)\n    list_of_people = []\n    for person in [\"Alice\", \"Bob\"]:\n        if is_in_room(person):\n            list_of_people.append(person)\n    say(\"The following people are joining for lunch: \" + \", \".join(list_of_people))\n\n# Go to the kitchen and ask if there is a person in the kitchen. If there is, ask them if they are hungry. If yes, ask them to bring the diet coke from the fridge to the kitchen."}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    people_joining = []\n    if is_in_room(\"Alice\"):\n        people_joining.append(\"Alice\")\n    if is_in_room(\"Bob\"):\n        people_joining.append(\"Bob\")\n    say(\"People joining for lunch: \" + \", \".join(people_joining))\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    people_joining = []\n    if is_in_room(\"Alice\"):\n        people_joining.append(\"Alice\")\n    if is_in_room(\"Bob\"):\n        people_joining.append(\"Bob\")\n    say(\"People joining for lunch: \" + \", \".join(people_joining))\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"Alice and Bob are joining for lunch\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")\n    go_to(start_loc)\n    list_of_people = []\n    for person in [\"Alice\", \"Bob\"]:\n        if is_in_room(person):\n            list_of_people.append(person)\n    say(\"The following people are joining for lunch: \" + \", \".join(list_of_people))\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"Alice and Bob are joining for lunch in 5 minutes\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")\n    go_to(start_loc)\n    list_of_people = []\n    for person in [\"Alice\", \"Bob\"]:\n        if is_in_room(person):\n            list_of_people.append(person)\n    say(\"The following people are joining for lunch: \" + \", \".join(list_of_people))\n\n#  \nGo to the kitchen and ask if anyone wants to play a game. If yes, ask them to choose a game from a list of games, and then play the game. If no, say that no one wants to play a game."}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n            go_to(start_loc)\n            say(\"Alice and Bob are joining for lunch\")\n        else:\n            go_to(start_loc)\n            say(\"Bob is not joining for lunch\")\n    else:\n        go_to(start_loc)\n        say(\"Alice is not joining for lunch\")\n\n# Go to the kitchen and ask if the person in the kitchen is ready to eat. If yes, ask if the person in the living room is ready to eat. If yes, ask if the person in the dining room is ready to eat. If yes, tell them that they can all eat together."}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    people_joining = []\n    if is_in_room(\"Alice\"):\n        people_joining.append(\"Alice\")\n    if is_in_room(\"Bob\"):\n        people_joining.append(\"Bob\")\n    say(\"People joining for lunch: \" + \", \".join(people_joining))\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n#  \nAsk if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch."}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"Alice and Bob are joining for lunch\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")\n    go_to(start_loc)\n    list_of_people = []\n    for person in [\"Alice\", \"Bob\"]:\n        if is_in_room(person):\n            list_of_people.append(person)\n    say(\"The following people are joining for lunch: \" + \", \".join(list_of_people))\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    list_of_people = []\n    if is_in_room(\"Alice\"):\n        list_of_people.append(\"Alice\")\n    if is_in_room(\"Bob\"):\n        list_of_people.append(\"Bob\")\n    say(\"The following people are joining for lunch: \" + \", \".join(list_of_people))\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    list_of_people = []\n    if is_in_room(\"Alice\"):\n        list_of_people.append(\"Alice\")\n    if is_in_room(\"Bob\"):\n        list_of_people.append(\"Bob\")\n    say(\"We are joining \" + \", \".join(list_of_people) + \" for lunch\")\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    people_joining = []\n    if is_in_room(\"Alice\"):\n        people_joining.append(\"Alice\")\n    if is_in_room(\"Bob\"):\n        people_joining.append(\"Bob\")\n    say(\"People joining for lunch: \" + \", \".join(people_joining))\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "LunchBreak", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    go_to(\"Bob's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    people_joining = []\n    if is_in_room(\"Alice\"):\n        people_joining.append(\"Alice\")\n    if is_in_room(\"Bob\"):\n        people_joining.append(\"Bob\")\n    say(\"People joining for lunch: \" + \", \".join(people_joining))\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    printer_rooms = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        printer_rooms.append(room)\n    for room in printer_rooms:\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            say(\"The \" + room + \" does not have a stapler\")\n    go_to(start_loc)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    printer_rooms_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            printer_rooms_without_stapler.append(room)\n    go_to(start_loc)\n    if len(printer_rooms_without_stapler) == 0:\n        say(\"All printer rooms have a stapler\")\n    else:\n        say(\"The following printer rooms do not have a stapler: \" + \", \".join(printer_rooms_without_stapler))\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    printer_rooms = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        printer_rooms.append(room)\n    for room in printer_rooms:\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            say(\"There is no stapler in the \" + room)\n    go_to(start_loc)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n#  \nGo to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    printer_rooms = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        printer_rooms.append(room)\n    for room in printer_rooms:\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            say(\"The \" + room + \" does not have a stapler\")\n    go_to(start_loc)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    printer_rooms = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        printer_rooms.append(room)\n    go_to(start_loc)\n    for room in printer_rooms:\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            say(\"There is no stapler in the \" + room)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n#  \nGo to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    printer_rooms_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            printer_rooms_without_stapler.append(room)\n    go_to(start_loc)\n    if len(printer_rooms_without_stapler) == 0:\n        say(\"All printer rooms have a stapler\")\n    else:\n        say(\"The following printer rooms do not have a stapler: \" + \", \".join(printer_rooms_without_stapler))\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    printer_rooms = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        printer_rooms.append(room)\n    stapler_found = False\n    stapler_loc = None\n    for room in printer_rooms:\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n#  \nGo to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    printer_rooms = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        printer_rooms.append(room)\n    for room in printer_rooms:\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            say(\"There is no stapler in the \" + room)\n    go_to(start_loc)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "StaplerSupply", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"university\")\n    go_to(\"conference room\")\n    say(\"You have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"university\")\n    go_to(\"conference room\")\n    say(\"You have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"university\")\n    go_to(\"conference room\")\n    say(\"You have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"university\")\n    go_to(\"conference room\")\n    say(\"You have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"university\")\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"university\")\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"university\")\n    go_to(\"conference room\")\n    say(\"You have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"You have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"university\")\n    go_to(\"conference room\")\n    say(\"You have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n    go_to(start_loc)\n\n#  \nGo to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"university\")\n    go_to(\"conference room\")\n    say(\"You have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"university\")\n    go_to(\"conference room\")\n    say(\"You have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"university\")\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                response = ask(\"\", \"Please follow me\", [\"Yes\", \"No\"])\n                if response == \"Yes\":\n                    go_to(\"conference room\")\n                    say(\"I have arrived at the conference room\")\n                    say(\"Enjoy your visit here!\")\n                    break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"You have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"You have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms in the house.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's\n# office\"), go_to(\"Jill's study\"). Immediate successive calls to go_to() can be\n# optimized to avoid unnecessary movement - e.g. go_to(\"kitchen\"); go_to(\"living\n# room\"); go_to(\"dining room\") can be optimized to go_to(\"dining room\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to\n# respond. Return with the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud. Make sure you are either in a room with a person, or\n# at the starting location before calling this function.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Go to the kitchen, ask Mom if dinner is ready, and come back and tell me what she said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    response = ask(\"Mom\", \"Is dinner ready?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Mom said: \" + response)\n\n# Check if there are any mugs in the living room, and come back and tell me if there are any\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"living room\")\n    mug_found = is_in_room(\"mug\")\n    go_to(start_loc)\n    if mug_found:\n        say(\"There is a mug in the living room\")\n    else:\n        say(\"There is no mug in the living room\")\n\n# Check if there are any staplers in any printer room, and come back and tell me if there are any, and if so, where\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")\n\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n#  \n", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"university\")\n                go_to(\"main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
