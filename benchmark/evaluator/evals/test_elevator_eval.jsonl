{"description": "good", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # good\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Follow me please.\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_welcome t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nrobot_ask_tour t_say(\"welcome to the university! follow me please.\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"yes\",4)\nreplied(\"\",\"yes\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_go_to(\"conference room\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"conference room\",6)\nt_say(\"i have arrived at the conference room.\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"conference room\",7)\nt_say(\"enjoy your visit here!\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "good", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # good\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Follow me please.\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "good", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # good\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Follow me please.\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room. Enjoy your visit here!\")\n    ", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_welcome t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nrobot_ask_tour t_say(\"welcome to the university! follow me please.\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"yes\",4)\nreplied(\"\",\"yes\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_go_to(\"conference room\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"conference room\",6)\nt_say(\"i have arrived at the conference room. enjoy your visit here!\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "good", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # good\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Follow me please.\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room. Enjoy your visit here!\")\n    ", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "bad: does not go to elevator", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: does not go to elevator\n    start_loc = get_current_location()\n    go_to(\"office\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "bad: does not go to elevator", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: does not go to elevator\n    start_loc = get_current_location()\n    go_to(\"office\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "bad: does not wait until there is a person", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: does not wait until there is a person\n    start_loc = get_current_location()\n    go_to(\"office\")\n    if is_in_room(\"person\"):\n        response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"Welcome to the university!\")\n            go_to(\"conference room\")\n            say(\"I have arrived at the conference room.\")\n            say(\"Enjoy your visit here!\")\n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "bad: does not wait until there is a person", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: does not wait until there is a person\n    start_loc = get_current_location()\n    go_to(\"office\")\n    if is_in_room(\"person\"):\n        response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"Welcome to the university!\")\n            go_to(\"conference room\")\n            say(\"I have arrived at the conference room.\")\n            say(\"Enjoy your visit here!\")\n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "bad: first say statement is incorrect (missing)", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: first say statement is incorrect (missing)\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    \n    \n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "bad: first say statement is incorrect (missing)", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: first say statement is incorrect (missing)\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    \n    \n    ", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "bad: second say statment is incorrect (missing)", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: second say statment is incorrect (missing)\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "bad: second say statment is incorrect (missing)", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: second say statment is incorrect (missing)\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "bad: third say statemtnt is incorrect(missing)", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: third say statemtnt is incorrect(missing)\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "bad: third say statemtnt is incorrect(missing)", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: third say statemtnt is incorrect(missing)\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    ", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "bad: does not ask the person", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: does not ask the person\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "bad: does not ask the person", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: does not ask the person\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "bad: answers to ask statement are not recorded", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: answers to ask statement are not recorded\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            ask(\"\", \"Are you here for the tour?\", [\"yes\", \"no\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "bad: answers to ask statement are not recorded", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: answers to ask statement are not recorded\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            ask(\"\", \"Are you here for the tour?\", [\"yes\", \"no\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "bad: missmatch between ask response and question check", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: missmatch between ask response and question check\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"yep\", \"no\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "bad: missmatch between ask response and question check", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: missmatch between ask response and question check\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"yep\", \"no\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "bad: take person to confrence room ONLY if response is yes", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: take person to confrence room ONLY if response is yes\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response:\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "bad: take person to confrence room ONLY if response is yes", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: take person to confrence room ONLY if response is yes\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response:\n                say(\"Welcome to the university!\")\n                break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "bad: answer yes does not break the infinite loop", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: answer yes does not break the infinite loop\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                go_to(\"conference room\")\n                say(\"I have arrived at the conference room. Enjoy your visit here!\")\n        time.sleep(1)\n    \n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "bad: answer yes does not break the infinite loop", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: answer yes does not break the infinite loop\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                go_to(\"conference room\")\n                say(\"I have arrived at the conference room. Enjoy your visit here!\")\n        time.sleep(1)\n    \n    ", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "bad: answer no results in being taken to the confrence room", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: answer \"no\" results in being taken to the confrence room\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            say(\"Welcome to the university!\")\n            break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "bad: answer no results in being taken to the confrence room", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: answer \"no\" results in being taken to the confrence room\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            say(\"Welcome to the university!\")\n            break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"description": "bad:  answer of no does not result in continuing to wait", "is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: answer of \"no\" does not result in continuing to wait\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n            break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n:- not at(\"robot\", \"conference room\", timeout)."}
{"description": "bad:  answer of no does not result in continuing to wait", "is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "def task_program():\n    \n    # bad: answer of \"no\" does not result in continuing to wait\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n            break\n        time.sleep(1)\n    go_to(\"conference room\")\n    say(\"I have arrived at the conference room.\")\n    say(\"Enjoy your visit here!\")\n    ", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
