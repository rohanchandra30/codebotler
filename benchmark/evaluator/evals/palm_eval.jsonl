{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))\n", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))\n", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))\n", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))\n", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"Alice and Bob are joining for lunch.\")\n        else:\n            say(\"Alice is joining for lunch.\")\n    else:\n        say(\"No one is joining for lunch.\")\n    go_to(start_loc)", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"Alice and Bob are joining for lunch.\")\n        else:\n            say(\"Alice is joining for lunch.\")\n    else:\n        say(\"No one is joining for lunch.\")\n    go_to(start_loc)", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"Alice and Bob are joining for lunch.\")\n        else:\n            say(\"Alice is joining for lunch.\")\n    else:\n        say(\"No one is joining for lunch.\")\n    go_to(start_loc)", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"Alice and Bob are joining for lunch.\")\n        else:\n            say(\"Alice is joining for lunch.\")\n    else:\n        say(\"No one is joining for lunch.\")\n    go_to(start_loc)", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        for room in list_of_rooms:\n            if \"printer\" in room:\n                say(\"There is no stapler in the \" + room)", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        for room in list_of_rooms:\n            if \"printer\" in room:\n                say(\"There is no stapler in the \" + room)", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        for room in list_of_rooms:\n            if \"printer\" in room:\n                say(\"There is no stapler in the \" + room)", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    start_loc = get_current_location()\n    stapler_found = False\n    stapler_loc = None\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"stapler\"):\n            stapler_found = True\n            stapler_loc = room\n            break\n    go_to(start_loc)\n    if stapler_found:\n        say(\"There is a stapler in the \" + stapler_loc)\n    else:\n        say(\"There is no stapler in the house\")", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
