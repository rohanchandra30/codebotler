{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"nobody is joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"alice and bob are not joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"nobody is joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"nobody is joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response_alice = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    response_bob = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if response_alice == \"Yes\" and response_bob == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif response_alice == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif response_bob == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"No one is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response_alice = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    response_bob = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if response_alice == \"Yes\" and response_bob == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif response_alice == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif response_bob == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"No one is joining for lunch\")", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"no one is joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response_alice = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    response_bob = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if response_alice == \"Yes\" and response_bob == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif response_alice == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif response_bob == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"No one is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response_alice = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    response_bob = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if response_alice == \"Yes\" and response_bob == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif response_alice == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif response_bob == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"No one is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    say(\"Alice and Bob are joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    say(\"Alice and Bob are joining for lunch\")", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"alice and bob are joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    say(\"Alice and Bob are joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    say(\"Alice and Bob are joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    say(message)", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"nobody is joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"nobody is joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"nobody is joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")", "model": "", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"people joining for lunch are: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch are: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch are: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch are: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"Joining for lunch: \" + \", \".join(joining_for_lunch))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"joining for lunch: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"Joining for lunch: \" + \", \".join(joining_for_lunch))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"Joining for lunch: \" + \", \".join(joining_for_lunch))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"joining for lunch: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"Joining for lunch: \" + \", \".join(joining_for_lunch))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"joining for lunch: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"people joining for lunch: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"people joining for lunch: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"people joining for lunch are: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch are: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch are: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch are: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"alice, bob, are joining for lunch\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"are joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"alice, are joining for lunch\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"bob, are joining for lunch\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"people joining for lunch: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"people joining for lunch: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    if len(people_joining) > 0:\n        message = \"\"\n        for person in people_joining:\n            message += person + \", \"\n        message += \"are joining for lunch\"\n    else:\n        message = \"no one is joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"alice, bob, are joining for lunch\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    if len(people_joining) > 0:\n        message = \"\"\n        for person in people_joining:\n            message += person + \", \"\n        message += \"are joining for lunch\"\n    else:\n        message = \"no one is joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"no one is joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    if len(people_joining) > 0:\n        message = \"\"\n        for person in people_joining:\n            message += person + \", \"\n        message += \"are joining for lunch\"\n    else:\n        message = \"no one is joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"alice, are joining for lunch\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    if len(people_joining) > 0:\n        message = \"\"\n        for person in people_joining:\n            message += person + \", \"\n        message += \"are joining for lunch\"\n    else:\n        message = \"no one is joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"bob, are joining for lunch\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"alice, bob, are joining for lunch\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"are joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"alice, are joining for lunch\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"bob, are joining for lunch\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"people joining for lunch: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"the people joining for lunch are: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the people joining for lunch are: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"the people joining for lunch are: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"the people joining for lunch are: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"the people joining for lunch are: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the people joining for lunch are: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"the people joining for lunch are: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"the people joining for lunch are: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"people joining for lunch: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"alice, bob, are joining for lunch\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"are joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"alice, are joining for lunch\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"bob, are joining for lunch\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"people joining for lunch: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"alice, bob, are joining for lunch\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"are joining for lunch\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"alice, are joining for lunch\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"bob, are joining for lunch\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"people joining for lunch: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"the people joining for lunch are: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the people joining for lunch are: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"the people joining for lunch are: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"the people joining for lunch are: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_yes replied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"yes\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nt_say(\"we will meet in the lobby in 5 minutes\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"yes\",6)\nt_go_to(\"start_loc\",7)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nt_say(\"people joining for lunch: alice, bob\",8)\nreport_joining(\"alice\",8)\nreport_joining(\"bob\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\nmeet(\"bob\")\njoining(\"alice\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% both alice and bob join.\nstate_0.\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: \",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% neither alice or bob join.\nstate_1.\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_yes bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"yes\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nt_say(\"we will meet in the lobby in 5 minutes\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"yes\",3)\nt_go_to(\"bob\\'s office\",4)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",5)\nreplied(\"bob\",\"no\",6)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nasked(\"bob\",\"are you up for lunch?\",6)\nreply(\"bob\",\"no\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: alice\",7)\nreport_joining(\"alice\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"alice\")\njoining(\"alice\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only alice joins.\nstate_2.\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\").\n\n"}
{"is_sat": true, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_yes t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nreplied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"yes\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nt_say(\"we will meet in the lobby in 5 minutes\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"yes\",5)\nt_go_to(\"start_loc\",6)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"bob\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nt_say(\"people joining for lunch: bob\",7)\nreport_joining(\"bob\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nmeet(\"bob\")\njoining(\"bob\")\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that \n% we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining \n% for lunch.\n\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n% can't have contradictions\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n% only go to locations with alice, bob, start\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n% trivially require some actions\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n\n% come back\n:- not at(\"robot\",\"start_loc\", timeout).\n\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), \n        @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\n\nreport_joining(P, T) :- replied(P, \"yes\", _), at(\"robot\", \"start_loc\", T), t_say(X, T),\n    @contains_all(X, P, \"joining/participants/participat/join/come/coming\", \"lunch\") = 1.\n\njoining(P) :- report_joining(P, _).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n\n\n% only bob joins.\nstate_3.\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": false, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer rooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": false, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer rooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": false, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer rooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in printer room 1. \n% Say printer rooms 2,3 don't have stapler.\n% Don't say printer room 1 has stapler.\nstate_0.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n:- say_printer_1_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% stapler in living room. Say no printer rooms have stapler.\nstate_1.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler.\n\n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nsay_printer_1_no_stapler say_printer_2_no_stapler say_printer_3_no_stapler room(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "% Check every printer room for a stapler, and  come back and tell me which\n%  ones do not have a stapler.\n\n% go to every printer room\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n\n% don't go to a non-printer room\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n\n% only check for stapler\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n% never say living room since it is not a printer room\n:- t_say(X, _), @contains_all(X, \"living\") = 1.\n\n% come back\n:- not at(\"robot\", \"start_loc\", timeout).\n\n% trivially require actions\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n\n% say which printer room\nsay_printer_1_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 1\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_2_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/don't/doesn't/n't\") = 1.\nsay_printer_3_no_stapler :- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/don't/doesn't/n't\") = 1.\n\n\n\n% there is no stapler. Say no printer rooms have stapler.\nstate_2.\n:- not say_printer_1_no_stapler.\n:- not say_printer_2_no_stapler.\n:- not say_printer_3_no_stapler."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_welcome t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"yes\",4)\nreplied(\"\",\"yes\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_go_to(\"main conference room\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nt_go_to(\"start_loc\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"start_loc\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_ask_tour t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"no\",4)\nreplied(\"\",\"no\",4)\nt_is_in_room(\"person\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nasked(\"\",\"are you here for the tour?\",6)\nreply(\"\",\"no\",6)\nreplied(\"\",\"no\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_welcome t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"yes\",4)\nreplied(\"\",\"yes\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_go_to(\"main conference room\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nt_go_to(\"start_loc\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"start_loc\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_ask_tour t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"no\",4)\nreplied(\"\",\"no\",4)\nt_is_in_room(\"person\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nasked(\"\",\"are you here for the tour?\",6)\nreply(\"\",\"no\",6)\nreplied(\"\",\"no\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_welcome t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"yes\",4)\nreplied(\"\",\"yes\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_go_to(\"main conference room\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nt_go_to(\"start_loc\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"start_loc\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_ask_tour t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"no\",4)\nreplied(\"\",\"no\",4)\nt_is_in_room(\"person\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nasked(\"\",\"are you here for the tour?\",6)\nreply(\"\",\"no\",6)\nreplied(\"\",\"no\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me to the main conference room\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_welcome t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nrobot_ask_tour t_say(\"welcome to the university! please follow me to the main conference room\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"yes\",4)\nreplied(\"\",\"yes\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_go_to(\"main conference room\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nt_go_to(\"start_loc\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"start_loc\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me to the main conference room\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_ask_tour t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"no\",4)\nreplied(\"\",\"no\",4)\nt_is_in_room(\"person\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nasked(\"\",\"are you here for the tour?\",6)\nreply(\"\",\"no\",6)\nreplied(\"\",\"no\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me to the main conference room\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_welcome t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"yes\",4)\nreplied(\"\",\"yes\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_go_to(\"main conference room\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nt_go_to(\"start_loc\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"start_loc\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_ask_tour t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"no\",4)\nreplied(\"\",\"no\",4)\nt_is_in_room(\"person\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nasked(\"\",\"are you here for the tour?\",6)\nreply(\"\",\"no\",6)\nreplied(\"\",\"no\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university. Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university. please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university. Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university. Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_welcome t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"yes\",4)\nreplied(\"\",\"yes\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_go_to(\"main conference room\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nt_go_to(\"start_loc\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"start_loc\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"start_loc\",1)\nrobot_ask_tour t_go_to(\"elevator\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nasked(\"\",\"are you here for the tour?\",4)\nreply(\"\",\"no\",4)\nreplied(\"\",\"no\",4)\nt_is_in_room(\"person\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nasked(\"\",\"are you here for the tour?\",6)\nreply(\"\",\"no\",6)\nreplied(\"\",\"no\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"elevator\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_welcome t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nrobot_ask_tour t_say(\"welcome to the university! please follow me.\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"yes\",3)\nreplied(\"\",\"yes\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_go_to(\"main conference room\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"main conference room\",5)\nt_say(\"we have arrived at the main conference room. enjoy your visit here!\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"main conference room\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"main conference room\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"main conference room\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"main conference room\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"main conference room\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"main conference room\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"main conference room\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"main conference room\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"main conference room\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"main conference room\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"main conference room\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"main conference room\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"main conference room\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"main conference room\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"main conference room\",20)\nrobot_follow robot_enjoy_visit room(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"yes\".\nstate_0.\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit.\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at elevator and says \"no\".\nstate_1.\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout).\n\n"}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\ntimed_out runtime_error(\"  \")\n", "constraint": "% Go to the elevator. Wait until someone shows up and ask them if they are here \n% for the tour. If yes, welcome them to the university, ask them to follow you, \n% and take them to the main conference room. If not, wait for the next person. \n% When you get to the conference room, say you have arrived at the conference \n% room and also say enjoy your visit here!\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow/come\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n\n% person is at start_loc.\nstate_2.\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark wants to leave at \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark wants to leave at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally's office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said: yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark said: 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "% Ask Sally in her office if she wants to go to the cinema with Mark. \n% Go to Mark's office and tell him Sally\u2019s answer. If Sally says yes, ask Mark \n% whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time \n% Mark is leaving.\n\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n\n\n% Sally says yes, Mark says 5pm.\nstate_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies.\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies.\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"start_loc\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"start_loc\",3)\nt_say(\"we need to buy 0 chocolates, 0 caramels, and 0 gummies\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"start_loc\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"start_loc\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate2 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 2 chocolates\nstate_0.\nchocolate2.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nchocolate1_gummy1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "% Go to every office, and if there is anyone there, ask if they'd like a chocolate, \n% caramel, or gummy. Come back and tell me how many of each we need to buy.\n\n:- not at(\"robot\", \"start_loc\", timeout).\n\nchocolate2 :- t_say(X, T), @contains_all(X, \"chocolates/chocolate\", \"2/two\") = 1, \n                @contains_any(X, \"gummy\", \"gummies\", \"caramel\",\"caramels\") = 0.\n                \nchocolate1_gummy1 :- t_say(X, T), @contains_any(X, \"caramels\", \"caramel\") = 0,\n                @contains_all(X, \"one chocolate/1 chocolate\", \"1 gummy/one gummy\") = 1.\n\n\n\n% 1 chocolate, 1 gummy\nstate_1.\nchocolate1_gummy1."}
