{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response_alice = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    response_bob = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response_alice == \"Yes\" and response_bob == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the supply room and ask if there is a red marker. If there is, go to the main office and tell them that the supply room needs a red marker. If not, tell them that the supply room has a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker in the fridge. If yes, tell me that there is a red marker in the fridge. If no, tell me that the fridge needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Ask if the person in the main office is up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker in the fridge. If yes, tell me that there is a red marker in the fridge. If no, tell me that the fridge needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response_alice = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    response_bob = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if response_alice == \"Yes\" and response_bob == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    else:\n        say(\"No one is joining for lunch\")\n\n# Go to the main office and ask if there is a red marker. If there is, go to the supply room and tell them that the main office needs a red marker. If not, go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them that the kitchen needs a red marker. If not, go to the supply room and tell them that the supply room needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them that the kitchen needs a red marker. If not, go to the supply room and tell them that the kitchen needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the main office and ask if there is a red marker. If there is, go to the supply room and tell them that the main office needs a red marker. If not, ask if there is a blue marker. If there is, go to the supply room and tell them that the main office needs a blue marker. If not, go to the supply room and tell them that the main office needs a red marker and a blue marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the main office, ask if there is a red marker, and if so, go to the supply room and tell them that the main office needs a red marker. If not, go to the supply room and tell them that the main office needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them to bring it to me. If not, go to the supply room and tell them to bring a red marker to me."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if anyone is hungry. If yes, ask them to bring the food from the fridge to the kitchen. When everyone is done, tell me everyone is done."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker in the fridge. If there is, go to the supply room and tell them that the fridge needs a red marker. If there is not, go to the supply room and tell them that the fridge needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker in the fridge. If there is, go to the supply room and tell them that the fridge needs a red marker. If not, go to the supply room and tell them that the fridge needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them that the kitchen needs a red marker. If not, ask if there is a blue marker. If there is, go to the supply room and tell them that the kitchen needs a blue marker. If not, go to the supply room and tell them that the kitchen needs a red marker and a blue marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the main office and ask if there is a red marker. If there is, go to the supply room and tell them that the main office needs a red marker. If not, go to the supply room and tell them that the main office needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker in the fridge. If there is, say that the fridge needs to be cleaned. If not, say that the fridge is clean."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker in the fridge. If there is, tell me that you can take it. If not, tell me that you need to go to the supply room and get it."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response_alice = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    response_bob = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if response_alice == \"Yes\" and response_bob == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    else:\n        say(\"No one is joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them to place the red marker in the main office. If not, go to the supply room and tell them to place the red marker in the kitchen."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Who all are joining for lunch?\")\n\n# Go to the kitchen and ask if there is a red marker in the fridge. If there is, go to the supply room and tell them that the fridge needs a red marker. If not, tell them that the fridge is fine."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Who all are joining for lunch?\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them to place the red marker there. If not, go to the supply room and tell them to place the red marker there."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone has anything to eat. If there is a person, ask them to bring the food from the fridge to the table. If there is no one, go to the supply room and tell them that the kitchen needs food."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone has anything to eat. If yes, ask them to bring it to the living room. If no, ask if anyone has anything to drink. If yes, ask them to bring it to the living room. If no, ask if anyone has anything to do. If yes, ask them to bring it to the living room. If no, say that there is nothing to eat, drink, or do."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone wants to eat. If someone does, ask them to bring the food from the fridge to the table."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone wants to eat. If so, ask them to bring the food to the kitchen. Once everyone is done, tell me everyone is done."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the main office and ask if there is a red marker. If there is, go to the supply room and tell them that the main office needs a red marker. If not, ask if there is a blue marker. If there is, go to the supply room and tell them that the main office needs a blue marker. If not, go to the supply room and tell them that the main office needs a red or blue marker."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to bring the food from the fridge to the table. If no one is hungry, go to the supply room and tell them that the kitchen is full."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone is hungry. If so, ask them to bring the food from the fridge to the table. If not, go to the supply room and tell them to bring the food from the fridge to the table."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone is hungry. If yes, ask them to bring the food from the fridge to the table. If no, go to the supply room and tell them that the kitchen is full."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to bring some food to the kitchen. If nobody is hungry, go to the supply room and tell them that the kitchen is empty."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone wants to eat. If someone does, ask them to bring the food from the fridge to the table."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone wants to eat. If someone wants to eat, ask them to bring the diet coke from the fridge to the kitchen."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone is hungry. If yes, ask them to bring some food to the kitchen. If no, go to the main office and ask if anyone is hungry. If yes, ask them to bring some food to the main office. If no, go to the supply room and ask if anyone is hungry. If yes, ask them to bring some food to the supply room. If no, go to the lobby and ask if"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone wants to eat. If someone wants to eat, ask them to bring the food from the fridge to the kitchen."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"start\")\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone wants to eat. If there is a person, ask them to bring the food from the fridge to the table."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to bring the food from the fridge to the table. If nobody is hungry, go to the supply room and tell them that the kitchen is empty."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone is hungry. If yes, ask them to bring their food to the kitchen."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone wants to eat. If yes, ask them to bring the food from the fridge to the kitchen. If no, ask the kitchen to prepare the food."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"main office\")\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone is hungry. If so, ask them to bring the food from the fridge to the table."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if anyone wants to have a sandwich. If no one wants a sandwich, go to the supply room and tell them that the kitchen is out of sandwiches. If someone wants a sandwich, go to the kitchen and tell them that you will have your sandwich shortly."}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"lobby\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"main office\")\n    say(\"Alice and Bob are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them to bring the red marker to the main office. If not, go to the supply room and tell them to bring the blue marker to the main office."}
