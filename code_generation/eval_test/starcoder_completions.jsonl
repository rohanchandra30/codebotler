{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker in the fridge. If there is, go to the supply room and tell them that the fridge needs a red marker. If not, go to the supply room and tell them that the fridge needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them that the kitchen needs a red marker. If not, go to the supply room and tell them that the kitchen needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the main office, and ask if there is a red marker. If there is, go to the supply room and tell them that the main office needs a red marker. If not, go to the supply room and tell them that the main office needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a diet coke in the fridge. If yes, go to the supply room and tell them that the kitchen needs to be cleaned. If not, go to the supply room and tell them that the kitchen needs a diet coke."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker in the fridge. If there is, go to the supply room and tell them that the fridge needs a red marker. If not, go to the supply room and tell them that the fridge needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them that the kitchen needs a red marker. If not, go to the living room and tell them that the kitchen needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them to put it in the fridge. If there is not, tell them to go to the supply room."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the main office, and ask if there is a red marker. If there is, go to the supply room and tell them that the main office needs a red marker. If not, go to the supply room and tell them that the main office needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them that the kitchen needs a red marker. If not, go to the main office and tell them that the kitchen needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker in the fridge. If there is, go to the supply room and tell them that the fridge needs to be cleaned. If not, go to the supply room and tell them that the fridge needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the main office, and ask if there is a red marker. If there is, go to the supply room and tell them that the main office needs a red marker. If not, go to the supply room and tell them that the main office needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them to bring it here. If not, go to the supply room and tell them to bring a red marker here."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a diet coke in the fridge. If there is, go to the supply room and tell them to bring it here. If not, go to the supply room and tell them to bring a diet coke here."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"Who all are joining for lunch?\")\n\n# Go to the kitchen and ask if there is a spatula in the fridge. If there is, go to the supply room and ask for a spatula. If not, go to the supply room and ask for a spatula."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them that the kitchen needs a red marker. If not, go to the living room and tell them that the kitchen needs a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a coke in the fridge. If there is, go to the supply room and tell them that the kitchen needs to be cleaned. If there is not, go to the supply room and tell them that the kitchen needs a coke."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them to put it in the fridge. If not, go to the supply room and tell them to get a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            go_to(\"lobby\")\n            say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    say(\"who all are joining for lunch\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them that the kitchen needs a red marker. If there is not, go to the supply room and tell them that the kitchen does not need a red marker."}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response_alice = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    response_bob = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if response_alice == \"Yes\" and response_bob == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    say(\"Who all are joining for lunch: Alice and Bob\")\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them that the kitchen needs a red marker. If not, go to the main office and tell them that the kitchen needs a red marker."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen, ask the person if they want to use the stove, and if they say yes, go to the stove and turn it on."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask if anyone has the diet coke. If someone does, go to the supply room and tell them that the kitchen needs a diet coke. If not, go to the kitchen and tell them that the kitchen does not have a diet coke."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask if anyone needs a drink. If someone does, ask them to bring it to me."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to bring the food from the fridge to the kitchen."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen, ask someone to take the diet coke from the fridge, and bring it here. Then, go to the supply room and tell them to put the diet coke in the fridge."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen, ask the person who is there to put the diet coke in your basket, and bring it here."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask the person who is there to bring the diet coke from the fridge to the kitchen."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the main office, ask Alice if she needs a stapler, and then go to the supply room and tell them how many she needs."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen, ask the person if they want to go to the dining room, and if they say yes, go to the dining room."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen, ask the person there to take the diet coke from the fridge, and bring it here."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask if anyone has the diet coke from the fridge. If so, go to the supply room and tell them to bring the diet coke from the fridge to the supply room."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to eat the food from the fridge, and bring it here."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask the person who is there to bring the diet coke from the fridge to the kitchen."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask if anyone has the diet coke from the fridge. If so, bring it here."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to bring the food from the fridge to the kitchen."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask if there is a diet coke in the fridge. If there is, go to the supply room and tell them to take it out. If not, go to the supply room and tell them to bring it in."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to bring the food from the fridge to the kitchen."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to bring the food from the fridge to the kitchen."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to eat the bread from the fridge. If they are not hungry, tell them that there is no one hungry."}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here.\n# Then, go to the supply room and tell them how many staplers they need."}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"conference room\")\n                say(\"You have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"main conference room\")\n                say(\"Welcome to the university!\")\n                say(\"Please follow me to the main conference room\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"conference room\")\n                say(\"Welcome to the university!\")\n                say(\"Please follow me to the main conference room\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"main conference room\")\n                say(\"Welcome to the university! Please follow me to the main conference room\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n    say(\"I have arrived at the conference room! Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"conference room\")\n                say(\"Welcome to the university!\")\n                say(\"Please follow me to the main conference room\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"You have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"conference room\")\n                say(\"Welcome to the university! Please follow me to the main conference room.\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n    say(\"I have arrived at the conference room. Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"conference room\")\n                say(\"Welcome to the university!\")\n                say(\"Please follow me to the main conference room\")\n                break\n        time.sleep(1)\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"main conference room\")\n                say(\"You have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"main conference room\")\n                say(\"Welcome to the university! Please follow me to the main conference room\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"main conference room\")\n                say(\"You have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"main conference room\")\n                say(\"Welcome to the university! Please follow me to the main conference room\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"main conference room\")\n                say(\"You have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"conference room\")\n                say(\"Welcome to the university!\")\n                say(\"Please follow me to the main conference room\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n    say(\"I have arrived at the conference room\")\n    say(\"Enjoy your visit here!\")\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"conference room\")\n                say(\"You have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university\")\n                response = ask(\"\", \"Could you please follow me?\", [\"Yes\", \"No\"])\n                if response == \"Yes\":\n                    go_to(\"main conference room\")\n                    say(\"You have arrived at the conference room\")\n                    say(\"Enjoy your visit here!\")\n                    break\n            else:\n                time.sleep(1)\n        else:\n            time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes", "no"]}, {"name": "", "location": "elevator", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes", "no"]}, {"name": "", "location": "start_loc", "answers": ["yes", "no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                go_to(\"conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask if anyone is hungry. If there is someone hungry, ask them to bring the food to the kitchen."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask the person who is sitting next to you if they want to go to the dining room. If they say yes, go to the dining room and tell them that you are going to the dining room."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to bring the food to the kitchen."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Ask Aiden if he wants to go to the cinema with Mark. If he says yes, go to Mark\u2019s office and tell him Aiden\u2019s answer. If he says no, go to the supply room and tell him Aiden\u2019s answer."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask if there is a red marker. If there is, go to the supply room and tell them to get a red marker. If there is not, go to the supply room and tell them to get a red marker."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask the person sitting next to you if you want to go to the dining room. If you say yes, go to the dining room and ask the person sitting next to you if you want to go to the kitchen. If you say yes, go to the kitchen and ask the person sitting next to you if you want to go to the dining room."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Ask Jill if she needs to go to the kitchen to get a drink. If she says yes, go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to bring the food from the fridge to the table."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask the person who is sitting next to you if they want to go to the dining room. If they say yes, go to the dining room and tell them you are now in the dining room."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask the person who is sitting next to you if they want to go to the dining room. If they say yes, go to the dining room and ask them if they want to sit next to you. If they say yes, go to the dining room and ask them if they want to sit next to you."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask if anyone wants to go to the dining room. If someone says yes, go to the dining room and ask if anyone wants to sit at the table. If someone says yes, go to the dining room and ask if anyone wants to eat at the table. If someone says yes, go to the dining room and ask if anyone wants to drink at the table. If someone says yes, go to the dining room and ask if anyone wants to leave."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask the person sitting next to you if you can take the trash out. If you say yes, go to the supply room and tell them that the trash can needs to be taken out."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask the person sitting next to you if you can take the trash out. If you say yes, go to the supply room and ask the person there if they can take the trash out. If they say yes, go to the kitchen and ask the person sitting next to you if you can take the trash out. If you say yes, go to the supply room and ask the person there if they can take the trash out. If they say yes, go to the kitchen and ask the person sitting next to you if you can take the trash out. If you say yes, go to the supply room and ask the person there if they can take the"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Ask Amy if she wants to go to the cinema with Mark. If she says yes, go to Mark\u2019s office and tell him Amy\u2019s answer. If she says no, go to the supply room and tell him Amy\u2019s answer."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to bring their food to the kitchen."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask if anyone is hungry. If there is someone hungry, ask them to bring the food to the kitchen."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to bring the food to the kitchen."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask the person sitting next to you if they want to go to the dining room. If they say yes, go to the dining room and tell them that you are going to the dining room."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask if anyone wants to go to the dining room. If someone says yes, ask them to bring the diet coke from the fridge to the dining room."}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"When do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)\n\n# Go to the kitchen and ask the person sitting next to you if they want to go to the dining room. If they say yes, go to the dining room and tell them that you are going to the dining room."}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen, and if there is a person there, ask them to bring the diet coke from the f"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolate_needed += 1\n            elif response == \"Caramel\":\n                caramel_needed += 1\n            elif response == \"Gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen, and ask if there is a red marker. If there is, go to the supply room and tell them"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the main office, and if there is a red marker, ask if you can take it. If you can, go to"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen, and if there is a person there, ask them if they want to go to the dining room."}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen, and ask if anyone is hungry. If so, go to the dining room and tell them"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolate, \" + str(caramel_needed) + \" caramel, and \" + str(gummy_needed) + \" gummy\")\n\n# Go to the kitchen, and ask if anyone is hungry. If someone is hungry, ask them if they want to eat the f"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen, and if there is a fridge there, ask if they'd like a milkshake or a c"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolate, \" + str(caramel_needed) + \" caramel, and \" + str(gummy_needed) + \" gummy\")\n\n# Go to the kitchen, and ask if anyone is hungry. If so, go to the dining room and ask if anyone is hun"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolate_needed += 1\n            elif response == \"Caramel\":\n                caramel_needed += 1\n            elif response == \"Gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen, and if there is a person there, ask them to bring the diet coke from the fridge"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolate_needed += 1\n            elif response == \"Caramel\":\n                caramel_needed += 1\n            elif response == \"Gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen, and ask if anyone is hungry. If someone is hungry, ask them to bring the"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the main office, and ask if there is a red marker. If there is, go to the supply room and tell them"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolate_needed += 1\n            elif response == \"Caramel\":\n                caramel_needed += 1\n            elif response == \"Gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen, ask if anyone is hungry, and if so, ask them to bring the food to the k"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolate_needed += 1\n            elif response == \"Caramel\":\n                caramel_needed += 1\n            elif response == \"Gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen and ask if anyone is hungry. If so, go to the dining room and ask if anyone"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen, and ask if anyone is hungry. If so, ask them to bring the food to the k"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen and ask if anyone is hungry. If so, go to the dining room and ask if anyone"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolate, \" + str(caramel_needed) + \" caramel, and \" + str(gummy_needed) + \" gummy\")\n\n# Go to the kitchen, and ask if anyone is hungry. If someone is, ask them to bring the food to the kitchen. When"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen, and if there is a person there, ask them to take the diet coke from the fridge"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen and ask if anyone is hungry. If someone is, ask them to bring the food to the k"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen and ask if anyone is hungry. If someone is hungry, ask them to bring the"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolate_needed = 0\n    caramel_needed = 0\n    gummy_needed = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolate_needed += 1\n            elif response == \"caramel\":\n                caramel_needed += 1\n            elif response == \"gummy\":\n                gummy_needed += 1\n    go_to(start_loc)\n    say(\"We need \" + str(chocolate_needed) + \" chocolates, \" + str(caramel_needed) + \" caramels, and \" + str(gummy_needed) + \" gummies\")\n\n# Go to the kitchen and ask if anyone is hungry. If so, go to the dining room and ask if"}
