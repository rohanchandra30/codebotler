{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"the following people are joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": true, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "Answer:\nat(\"alice\",\"alice\\'s office\",0)\nat(\"bob\",\"bob\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nalice_no bob_no t_go_to(\"alice\\'s office\",1)\nat(\"bob\",\"bob\\'s office\",1)\nat(\"alice\",\"alice\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nat(\"alice\",\"alice\\'s office\",2)\nat(\"bob\",\"bob\\'s office\",2)\nat(\"robot\",\"alice\\'s office\",2)\nt_ask(\"alice\",\"are you up for lunch?\",\"[yes],[no]\",2)\n\\nboth_no replied(\"alice\",\"no\",3)\nt_go_to(\"bob\\'s office\",3)\nat(\"bob\",\"bob\\'s office\",3)\nat(\"alice\",\"alice\\'s office\",3)\nat(\"robot\",\"alice\\'s office\",3)\nasked(\"alice\",\"are you up for lunch?\",3)\nreply(\"alice\",\"no\",3)\nat(\"alice\",\"alice\\'s office\",4)\nat(\"bob\",\"bob\\'s office\",4)\nat(\"robot\",\"bob\\'s office\",4)\nt_ask(\"bob\",\"are you up for lunch?\",\"[yes],[no]\",4)\nreplied(\"bob\",\"no\",5)\nt_go_to(\"start_loc\",5)\nat(\"bob\",\"bob\\'s office\",5)\nat(\"alice\",\"alice\\'s office\",5)\nat(\"robot\",\"bob\\'s office\",5)\nasked(\"bob\",\"are you up for lunch?\",5)\nreply(\"bob\",\"no\",5)\nat(\"alice\",\"alice\\'s office\",6)\nat(\"bob\",\"bob\\'s office\",6)\nat(\"robot\",\"start_loc\",6)\nt_say(\"people joining for lunch: []\",6)\nat(\"bob\",\"bob\\'s office\",7)\nat(\"alice\",\"alice\\'s office\",7)\nat(\"robot\",\"start_loc\",7)\nat(\"alice\",\"alice\\'s office\",8)\nat(\"bob\",\"bob\\'s office\",8)\nat(\"robot\",\"start_loc\",8)\nat(\"bob\",\"bob\\'s office\",9)\nat(\"alice\",\"alice\\'s office\",9)\nat(\"robot\",\"start_loc\",9)\nat(\"alice\",\"alice\\'s office\",10)\nat(\"bob\",\"bob\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"bob\",\"bob\\'s office\",11)\nat(\"alice\",\"alice\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"alice\",\"alice\\'s office\",12)\nat(\"bob\",\"bob\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"bob\",\"bob\\'s office\",13)\nat(\"alice\",\"alice\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"alice\",\"alice\\'s office\",14)\nat(\"bob\",\"bob\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"bob\",\"bob\\'s office\",15)\nat(\"alice\",\"alice\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"alice\",\"alice\\'s office\",16)\nat(\"bob\",\"bob\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"bob\",\"bob\\'s office\",17)\nat(\"alice\",\"alice\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"alice\",\"alice\\'s office\",18)\nat(\"bob\",\"bob\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"bob\",\"bob\\'s office\",19)\nat(\"alice\",\"alice\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"alice\",\"alice\\'s office\",20)\nat(\"bob\",\"bob\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\noption(\"yes\")\noption(\"no\")\nroom(\"alice\\'s office\")\nroom(\"bob\\'s office\")\nroom(\"start_loc\")\n", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-0", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + str(people_joining))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            people_joining_for_lunch.append(\"Bob\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            people_joining_for_lunch.append(\"Bob\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            people_joining_for_lunch.append(\"Bob\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        go_to(\"Bob's office\")\n        response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            people_joining_for_lunch.append(\"Bob\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + \", \".join(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        go_to(\"lobby\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        go_to(\"lobby\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"main office\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        go_to(\"lobby\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        go_to(\"lobby\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"main office\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        go_to(\"lobby\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        go_to(\"lobby\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"main office\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        go_to(\"lobby\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        go_to(\"lobby\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"main office\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(get_current_location())\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(get_current_location())\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(get_current_location())\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(get_current_location())\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"The following people are joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch are: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"Alice is joining for lunch\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"Bob is joining for lunch\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}
{"is_sat": false, "name": "LunchBreak-1", "state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    people_joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Alice\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        people_joining_for_lunch.append(\"Bob\")\n        say(\"We will meet in the lobby in 5 minutes\")\n    go_to(\"lobby\")\n    say(\"People joining for lunch: \" + str(people_joining_for_lunch))", "model": "", "constraint": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    say(\"the following rooms do not have a stapler: \" + \", \".join(room_without_stapler))", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    say(\"the following rooms do not have a stapler: \" + \", \".join(room_without_stapler))", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    say(\"the following rooms do not have a stapler: \" + \", \".join(room_without_stapler))", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    say(\"The following rooms do not have a stapler: \" + str(room_without_stapler))", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    say(\"The following rooms do not have a stapler: \" + str(room_without_stapler))", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    say(\"The following rooms do not have a stapler: \" + str(room_without_stapler))", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    say(\"the following rooms do not have a stapler: \" + \", \".join(room_without_stapler))", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    say(\"the following rooms do not have a stapler: \" + \", \".join(room_without_stapler))", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    say(\"the following rooms do not have a stapler: \" + \", \".join(room_without_stapler))", "model": "", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"printer room 1\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"printer room 1\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"printer room 1\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"printer room 1\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"printer room 1\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"printer room 1\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"printer room 1\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"printer room 1\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"printer room 1\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"printer room 1\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"printer room 1\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"printer room 1\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"printer room 1\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"printer room 1\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"printer room 1\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"printer room 1\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"printer room 1\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"printer room 1\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"printer room 1\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"printer room 1\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"stapler\",\"living room\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"stapler\",\"living room\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"stapler\",\"living room\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"stapler\",\"living room\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"stapler\",\"living room\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"stapler\",\"living room\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"stapler\",\"living room\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"stapler\",\"living room\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"stapler\",\"living room\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"stapler\",\"living room\",9)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"stapler\",\"living room\",10)\nat(\"robot\",\"start_loc\",10)\nat(\"stapler\",\"living room\",11)\nat(\"robot\",\"start_loc\",11)\nat(\"stapler\",\"living room\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"stapler\",\"living room\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"stapler\",\"living room\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"stapler\",\"living room\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"stapler\",\"living room\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"stapler\",\"living room\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"stapler\",\"living room\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"stapler\",\"living room\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"stapler\",\"living room\",20)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": true, "name": "StaplerSupply-0", "state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)", "model": "Answer:\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\n\\nt_go_to(\"printer room 1\",2)\nat(\"robot\",\"start_loc\",2)\nt_is_in_room(\"stapler\",3)\nat(\"robot\",\"printer room 1\",3)\nt_go_to(\"printer room 2\",4)\nat(\"robot\",\"printer room 1\",4)\nt_is_in_room(\"stapler\",5)\nat(\"robot\",\"printer room 2\",5)\nt_go_to(\"printer room 3\",6)\nat(\"robot\",\"printer room 2\",6)\nt_is_in_room(\"stapler\",7)\nat(\"robot\",\"printer room 3\",7)\nt_go_to(\"start_loc\",8)\nat(\"robot\",\"printer room 3\",8)\nat(\"robot\",\"start_loc\",9)\nt_say(\"printer room 1, printer room 2, printer room 3, do not have a stapler\",9)\nat(\"robot\",\"start_loc\",10)\nat(\"robot\",\"start_loc\",11)\nat(\"robot\",\"start_loc\",12)\nat(\"robot\",\"start_loc\",13)\nat(\"robot\",\"start_loc\",14)\nat(\"robot\",\"start_loc\",15)\nat(\"robot\",\"start_loc\",16)\nat(\"robot\",\"start_loc\",17)\nat(\"robot\",\"start_loc\",18)\nat(\"robot\",\"start_loc\",19)\nat(\"robot\",\"start_loc\",20)\nroom(\"printer room 1\")\nroom(\"living room\")\nroom(\"printer room 2\")\nroom(\"printer room 3\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": false, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"elevator\",0)\nat(\"\",\"elevator\",0)\nat(\"robot\",\"start_loc\",0)\nrobot_ask_tour t_go_to(\"elevator\",0)\nat(\"\",\"elevator\",1)\nat(\"person\",\"elevator\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"elevator\",2)\nat(\"\",\"elevator\",2)\nat(\"robot\",\"elevator\",2)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",2)\nat(\"\",\"elevator\",3)\nat(\"person\",\"elevator\",3)\nat(\"robot\",\"elevator\",3)\nasked(\"\",\"are you here for the tour?\",3)\nreply(\"\",\"no\",3)\nreplied(\"\",\"no\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"elevator\",4)\nat(\"\",\"elevator\",4)\nat(\"robot\",\"elevator\",4)\nt_ask(\"\",\"are you here for the tour?\",\"[yes],[no]\",4)\nat(\"\",\"elevator\",5)\nat(\"person\",\"elevator\",5)\nat(\"robot\",\"elevator\",5)\nasked(\"\",\"are you here for the tour?\",5)\nreply(\"\",\"no\",5)\nreplied(\"\",\"no\",5)\nat(\"person\",\"elevator\",6)\nat(\"\",\"elevator\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"elevator\",7)\nat(\"person\",\"elevator\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"elevator\",8)\nat(\"\",\"elevator\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"elevator\",9)\nat(\"person\",\"elevator\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"elevator\",10)\nat(\"\",\"elevator\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"elevator\",11)\nat(\"person\",\"elevator\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"elevator\",12)\nat(\"\",\"elevator\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"elevator\",13)\nat(\"person\",\"elevator\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"elevator\",14)\nat(\"\",\"elevator\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"elevator\",15)\nat(\"person\",\"elevator\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"elevator\",16)\nat(\"\",\"elevator\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"elevator\",17)\nat(\"person\",\"elevator\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"elevator\",18)\nat(\"\",\"elevator\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"elevator\",19)\nat(\"person\",\"elevator\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"elevator\",20)\nat(\"\",\"elevator\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\noption(\"yes\")\noption(\"no\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "ElevatorTour-0", "state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university!\")\n                say(\"Please follow me\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the conference room\")\n                say(\"Enjoy your visit here!\")\n                break\n        time.sleep(1)", "model": "Answer:\n\\nat(\"person\",\"start_loc\",0)\nat(\"\",\"start_loc\",0)\nat(\"robot\",\"start_loc\",0)\nt_go_to(\"elevator\",0)\nat(\"\",\"start_loc\",1)\nat(\"person\",\"start_loc\",1)\nat(\"robot\",\"elevator\",1)\nt_is_in_room(\"person\",1)\nat(\"person\",\"start_loc\",2)\nat(\"\",\"start_loc\",2)\nat(\"robot\",\"elevator\",2)\nt_is_in_room(\"person\",2)\nat(\"\",\"start_loc\",3)\nat(\"person\",\"start_loc\",3)\nat(\"robot\",\"elevator\",3)\nat(\"person\",\"start_loc\",4)\nat(\"\",\"start_loc\",4)\nat(\"robot\",\"elevator\",4)\nat(\"\",\"start_loc\",5)\nat(\"person\",\"start_loc\",5)\nat(\"robot\",\"elevator\",5)\nat(\"person\",\"start_loc\",6)\nat(\"\",\"start_loc\",6)\nat(\"robot\",\"elevator\",6)\nat(\"\",\"start_loc\",7)\nat(\"person\",\"start_loc\",7)\nat(\"robot\",\"elevator\",7)\nat(\"person\",\"start_loc\",8)\nat(\"\",\"start_loc\",8)\nat(\"robot\",\"elevator\",8)\nat(\"\",\"start_loc\",9)\nat(\"person\",\"start_loc\",9)\nat(\"robot\",\"elevator\",9)\nat(\"person\",\"start_loc\",10)\nat(\"\",\"start_loc\",10)\nat(\"robot\",\"elevator\",10)\nat(\"\",\"start_loc\",11)\nat(\"person\",\"start_loc\",11)\nat(\"robot\",\"elevator\",11)\nat(\"person\",\"start_loc\",12)\nat(\"\",\"start_loc\",12)\nat(\"robot\",\"elevator\",12)\nat(\"\",\"start_loc\",13)\nat(\"person\",\"start_loc\",13)\nat(\"robot\",\"elevator\",13)\nat(\"person\",\"start_loc\",14)\nat(\"\",\"start_loc\",14)\nat(\"robot\",\"elevator\",14)\nat(\"\",\"start_loc\",15)\nat(\"person\",\"start_loc\",15)\nat(\"robot\",\"elevator\",15)\nat(\"person\",\"start_loc\",16)\nat(\"\",\"start_loc\",16)\nat(\"robot\",\"elevator\",16)\nat(\"\",\"start_loc\",17)\nat(\"person\",\"start_loc\",17)\nat(\"robot\",\"elevator\",17)\nat(\"person\",\"start_loc\",18)\nat(\"\",\"start_loc\",18)\nat(\"robot\",\"elevator\",18)\nat(\"\",\"start_loc\",19)\nat(\"person\",\"start_loc\",19)\nat(\"robot\",\"elevator\",19)\nat(\"person\",\"start_loc\",20)\nat(\"\",\"start_loc\",20)\nat(\"robot\",\"elevator\",20)\nroom(\"elevator\")\nroom(\"main conference room\")\nroom(\"start_loc\")\n", "constraint": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "MovieMessenger-0", "state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        go_to(\"Mark's office\")\n        say(\"Sally said yes\")\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)\n    else:\n        go_to(\"Mark's office\")\n        say(\"Sally said no\")", "model": "Answer:\n\\nt_go_to(\"sally\\'s office\",0)\nat(\"sally\",\"sally\\'s office\",0)\nat(\"mark\",\"mark\\'s office\",0)\nat(\"robot\",\"sally office\",0)\nat(\"mark\",\"mark\\'s office\",1)\nat(\"sally\",\"sally\\'s office\",1)\nat(\"robot\",\"sally\\'s office\",1)\nt_ask(\"sally\",\"do you want to go to the cinema with mark?\",\"[yes],[no]\",1)\nt_go_to(\"mark\\'s office\",2)\nat(\"sally\",\"sally\\'s office\",2)\nat(\"mark\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nasked(\"sally\",\"do you want to go to the cinema with mark?\",2)\nreply(\"sally\",\"yes\",2)\nreplied(\"sally\",\"yes\",2)\nt_say(\"sally said yes\",3)\nat(\"mark\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",3)\nat(\"robot\",\"mark\\'s office\",3)\nat(\"sally\",\"sally\\'s office\",4)\nat(\"mark\",\"mark\\'s office\",4)\nat(\"robot\",\"mark\\'s office\",4)\nt_ask(\"mark\",\"what time do you want to leave?\",\"[4pm],[5pm],[6pm]\",4)\nt_go_to(\"sally\\'s office\",5)\nat(\"mark\",\"mark\\'s office\",5)\nat(\"sally\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nasked(\"mark\",\"what time do you want to leave?\",5)\nreply(\"mark\",\"5pm\",5)\nreplied(\"mark\",\"5pm\",5)\nt_say(\"mark is leaving at 5pm\",6)\nat(\"sally\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",6)\nat(\"robot\",\"sally\\'s office\",6)\nat(\"mark\",\"mark\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",7)\nat(\"robot\",\"sally\\'s office\",7)\nat(\"sally\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",8)\nat(\"robot\",\"sally\\'s office\",8)\nat(\"mark\",\"mark\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",9)\nat(\"robot\",\"sally\\'s office\",9)\nat(\"sally\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",10)\nat(\"robot\",\"sally\\'s office\",10)\nat(\"mark\",\"mark\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",11)\nat(\"robot\",\"sally\\'s office\",11)\nat(\"sally\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",12)\nat(\"robot\",\"sally\\'s office\",12)\nat(\"mark\",\"mark\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",13)\nat(\"robot\",\"sally\\'s office\",13)\nat(\"sally\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",14)\nat(\"robot\",\"sally\\'s office\",14)\nat(\"mark\",\"mark\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",15)\nat(\"robot\",\"sally\\'s office\",15)\nat(\"sally\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",16)\nat(\"robot\",\"sally\\'s office\",16)\nat(\"mark\",\"mark\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",17)\nat(\"robot\",\"sally\\'s office\",17)\nat(\"sally\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",18)\nat(\"robot\",\"sally\\'s office\",18)\nat(\"mark\",\"mark\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",19)\nat(\"robot\",\"sally\\'s office\",19)\nat(\"sally\",\"sally\\'s office\",20)\nat(\"mark\",\"mark\\'s office\",20)\nat(\"robot\",\"sally\\'s office\",20)\nroom(\"sally\\'s office\")\nroom(\"mark\\'s office\")\noption(\"yes\")\noption(\"no\")\noption(\"4pm\")\noption(\"5pm\")\noption(\"6pm\")\n", "constraint": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(\"main office\")\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"chocolate\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_go_to(\"main office\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(\"main office\")\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"gummy\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_go_to(\"main office\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"chocolate\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummys\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"gummy\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummys\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummys.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummys.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(\"main office\")\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"chocolate\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_go_to(\"main office\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(\"main office\")\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"gummy\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_go_to(\"main office\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"chocolate\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummys\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"gummy\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummys\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": false, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in get_all_rooms():\n        if \"office\" in room:\n            go_to(room)\n            if is_in_room(\"person\"):\n                response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n                if response == \"chocolate\":\n                    chocolates += 1\n                elif response == \"caramel\":\n                    caramels += 1\n                elif response == \"gummy\":\n                    gummies += 1\n    return chocolates, caramels, gummies", "model": "", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": false, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in get_all_rooms():\n        if \"office\" in room:\n            go_to(room)\n            if is_in_room(\"person\"):\n                response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n                if response == \"chocolate\":\n                    chocolates += 1\n                elif response == \"caramel\":\n                    caramels += 1\n                elif response == \"gummy\":\n                    gummies += 1\n    return chocolates, caramels, gummies", "model": "", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"chocolate\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummys.\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"gummy\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummys.\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummys\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummys\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(\"start\")\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"chocolate\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_go_to(\"start\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(\"start\")\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"gummy\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_go_to(\"start\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(\"start\")\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"chocolate\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_go_to(\"start\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(\"start\")\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"gummy\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_go_to(\"start\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"chocolate\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies.\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"gummy\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies.\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummies.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummies.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(\"start\")\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"chocolate\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_go_to(\"start\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummies += 1\n    go_to(\"start\")\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"gummy\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_go_to(\"start\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(\"main office\")\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"chocolate\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_go_to(\"main office\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(\"main office\")\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_all_rooms(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_go_to(\"sally\\'s office\",1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"sally\\'s office\",2)\nt_is_in_room(\"person\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_go_to(\"mark\\'s office\",4)\nreply(\"\",\"chocolate\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"mark\\'s office\",5)\nt_is_in_room(\"person\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_go_to(\"cindy\\'s office\",7)\nreply(\"\",\"gummy\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"cindy\\'s office\",8)\nt_is_in_room(\"person\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_go_to(\"start_loc\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"start_loc\",10)\nt_is_in_room(\"person\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_go_to(\"main office\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummys.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    for room in get_all_rooms():\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummys.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"chocolate\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 2 chocolates, 0 caramels, and 0 gummys.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}
{"is_sat": true, "name": "HalloweenList-0", "state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    chocolates = 0\n    caramels = 0\n    gummys = 0\n    list_of_rooms = get_all_rooms()\n    for room in list_of_rooms:\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"chocolate\", \"caramel\", \"gummy\"])\n            if response == \"chocolate\":\n                chocolates += 1\n            elif response == \"caramel\":\n                caramels += 1\n            elif response == \"gummy\":\n                gummys += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummys) + \" gummys.\")", "model": "Answer:\n\\nat(\"person\",\"sally\\'s office\",0)\nat(\"person\",\"mark\\'s office\",0)\nat(\"robot\",\"start_loc\",0)\nt_get_current_location(0)\nat(\"person\",\"mark\\'s office\",1)\nat(\"person\",\"sally\\'s office\",1)\nat(\"robot\",\"start_loc\",1)\nt_get_all_rooms(1)\nat(\"person\",\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",2)\nat(\"robot\",\"start_loc\",2)\nt_go_to(\"sally\\'s office\",2)\nat(\"person\",\"mark\\'s office\",3)\nat(\"person\",\"sally\\'s office\",3)\nat(\"robot\",\"sally\\'s office\",3)\nt_is_in_room(\"person\",3)\nat(\"person\",\"sally\\'s office\",4)\nat(\"person\",\"mark\\'s office\",4)\nat(\"robot\",\"sally\\'s office\",4)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",4)\nat(\"person\",\"mark\\'s office\",5)\nat(\"person\",\"sally\\'s office\",5)\nat(\"robot\",\"sally\\'s office\",5)\nt_go_to(\"mark\\'s office\",5)\nreply(\"\",\"chocolate\",5)\nat(\"person\",\"sally\\'s office\",6)\nat(\"person\",\"mark\\'s office\",6)\nat(\"robot\",\"mark\\'s office\",6)\nt_is_in_room(\"person\",6)\nat(\"person\",\"mark\\'s office\",7)\nat(\"person\",\"sally\\'s office\",7)\nat(\"robot\",\"mark\\'s office\",7)\nt_ask(\"\",\"would you like a chocolate, caramel, or gummy?\",\"[chocolate],[caramel],[gummy]\",7)\nat(\"person\",\"sally\\'s office\",8)\nat(\"person\",\"mark\\'s office\",8)\nat(\"robot\",\"mark\\'s office\",8)\nt_go_to(\"cindy\\'s office\",8)\nreply(\"\",\"gummy\",8)\nat(\"person\",\"mark\\'s office\",9)\nat(\"person\",\"sally\\'s office\",9)\nat(\"robot\",\"cindy\\'s office\",9)\nt_is_in_room(\"person\",9)\nat(\"person\",\"sally\\'s office\",10)\nat(\"person\",\"mark\\'s office\",10)\nat(\"robot\",\"cindy\\'s office\",10)\nt_go_to(\"start_loc\",10)\nat(\"person\",\"mark\\'s office\",11)\nat(\"person\",\"sally\\'s office\",11)\nat(\"robot\",\"start_loc\",11)\nt_is_in_room(\"person\",11)\nat(\"person\",\"sally\\'s office\",12)\nat(\"person\",\"mark\\'s office\",12)\nat(\"robot\",\"start_loc\",12)\nt_go_to(\"start_loc\",12)\nat(\"person\",\"mark\\'s office\",13)\nat(\"person\",\"sally\\'s office\",13)\nat(\"robot\",\"start_loc\",13)\nt_say(\"we need to buy 1 chocolates, 0 caramels, and 1 gummys.\",13)\nat(\"person\",\"sally\\'s office\",14)\nat(\"person\",\"mark\\'s office\",14)\nat(\"robot\",\"start_loc\",14)\nat(\"person\",\"mark\\'s office\",15)\nat(\"person\",\"sally\\'s office\",15)\nat(\"robot\",\"start_loc\",15)\nat(\"person\",\"sally\\'s office\",16)\nat(\"person\",\"mark\\'s office\",16)\nat(\"robot\",\"start_loc\",16)\nat(\"person\",\"mark\\'s office\",17)\nat(\"person\",\"sally\\'s office\",17)\nat(\"robot\",\"start_loc\",17)\nat(\"person\",\"sally\\'s office\",18)\nat(\"person\",\"mark\\'s office\",18)\nat(\"robot\",\"start_loc\",18)\nat(\"person\",\"mark\\'s office\",19)\nat(\"person\",\"sally\\'s office\",19)\nat(\"robot\",\"start_loc\",19)\nat(\"person\",\"sally\\'s office\",20)\nat(\"person\",\"mark\\'s office\",20)\nat(\"robot\",\"start_loc\",20)\nconstr_1 constr_0 room(\"sally\\'s office\")\nroom(\"mark\\'s office\")\nroom(\"cindy\\'s office\")\nroom(\"start_loc\")\noption(\"chocolate\")\noption(\"caramel\")\noption(\"gummy\")\n", "constraint": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}
