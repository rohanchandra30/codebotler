{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob\"\n    say(message)"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    else:\n        say(\"Alice and Bob are not joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"\"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    message += \"are joining for lunch\"\n    say(message)"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    say(message)"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    response_alice = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    response_bob = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if response_alice == \"Yes\" and response_bob == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif response_alice == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif response_bob == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"No one is joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    say(\"Alice and Bob are joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    message = \"Joining for lunch: \"\n    if alice_response == \"Yes\":\n        message += \"Alice, \"\n    if bob_response == \"Yes\":\n        message += \"Bob, \"\n    say(message)"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n        say(\"Alice and Bob are joining for lunch\")\n    elif alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    elif bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")\n    else:\n        say(\"Nobody is joining for lunch\")"}
{"name": "LunchBreak-0", "prompt": "Ask if Alice and Bob in their offices are up for lunch. If yes, tell them that we'll meet in the lobby in 5 minutes. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Alice's office\")\n    alice_response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"Bob's office\")\n    bob_response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    go_to(\"lobby\")\n    if alice_response == \"Yes\" and bob_response == \"Yes\":\n        say(\"We'll meet in the lobby in 5 minutes\")\n    go_to(start_loc)\n    if alice_response == \"Yes\":\n        say(\"Alice is joining for lunch\")\n    if bob_response == \"Yes\":\n        say(\"Bob is joining for lunch\")"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch are: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    joining_for_lunch = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        joining_for_lunch.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        joining_for_lunch.append(\"Bob\")\n    go_to(start_loc)\n    say(\"Joining for lunch: \" + \", \".join(joining_for_lunch))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch are: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    if len(people_joining) > 0:\n        message = \"\"\n        for person in people_joining:\n            message += person + \", \"\n        message += \"are joining for lunch\"\n    else:\n        message = \"no one is joining for lunch\"\n    say(message)"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_people = [\"Alice\", \"Bob\"]\n    people_joining = []\n    for person in list_of_people:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    for person in [\"Alice\", \"Bob\"]:\n        go_to(person + \"'s office\")\n        response = ask(person, \"Are you up for lunch?\", [\"Yes\", \"No\"])\n        if response == \"Yes\":\n            say(\"We will meet in the lobby in 5 minutes\")\n            people_joining.append(person)\n    go_to(start_loc)\n    message = \"\"\n    for person in people_joining:\n        message += person + \", \"\n    message += \"are joining for lunch\"\n    say(message)"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"The people joining for lunch are: \" + \", \".join(people_joining))"}
{"name": "LunchBreak-1", "prompt": "Ask Alice in her office if she is up for lunch, and if yes, tell her that we will meet in the lobby in 5 minutes. Do the same for Bob. Come back and tell me who all are joining for lunch.", "tests": [{"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- not joining(\"alice\").\n:- not meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- joining(\"alice\").\n:- meet(\"alice\").\n:- meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["yes"]}, {"name": "bob", "location": "bob's office", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- joining(\"bob\").\n:- not joining(\"alice\").\n:- meet(\"alice\").\n:- not meet(\"bob\")."}, {"state": {"locations": ["alice's office", "bob's office", "start_loc"], "objects": [], "interactive_agents": [{"name": "alice", "location": "alice's office", "answers": ["no"]}, {"name": "bob", "location": "bob's office", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\nboth_no :- replied(\"alice\",\"no\",_), replied(\"bob\",\"no\",_).\nboth_yes :- replied(\"alice\",\"yes\",_), replied(\"bob\",\"yes\",_).\n             \nalice_yes :- replied(\"alice\",\"yes\",_).\nalice_no :- replied(\"alice\",\"no\",_).\n\nbob_yes :- replied(\"bob\",\"yes\",_).\nbob_no :- replied(\"bob\",\"no\",_).\n\n:- alice_no, alice_yes.\n:- bob_no, bob_yes.\n:- not alice_no, not alice_yes.\n:- not bob_no, not bob_yes.\n\n:- t_go_to(X, T), @contains_any(X, \"alice\", \"bob\", \"start_loc\") = 0.\n\n\n:- not t_ask(\"alice\",_,_,_).\n:- not t_ask(\"bob\",_,_,_).\n:- not replied(_,_,_).\n:- not at(\"robot\",\"start_loc\", timeout).\n\nmeet(P) :- replied(P, \"yes\",T), t_say(X, T), @contains_all(X, \"meet\", \"lobby\", \"5 minutes/five minutes\") = 1.\nreport_joining(P, T) :- replied(P, \"yes\", _), t_say(X, T), @contains_all(X, P, \"joining/join/come/coming\",\"lunch\") = 1.\njoining(P) :- report_joining(P, _).\n:- report_joining(P, T), not at(\"robot\", \"start_loc\", T).\n\n:- option(X), @contains_any(X, \"yes\", \"no\") = 0.\n\n:- not joining(\"bob\").\n:- joining(\"alice\").\n:- not meet(\"alice\").\n:- meet(\"bob\")."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    people_joining = []\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Alice\")\n    go_to(\"Bob's office\")\n    response = ask(\"Bob\", \"Are you up for lunch?\", [\"Yes\", \"No\"])\n    if response == \"Yes\":\n        say(\"We will meet in the lobby in 5 minutes\")\n        people_joining.append(\"Bob\")\n    go_to(start_loc)\n    say(\"People joining for lunch: \" + \", \".join(people_joining))"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer rooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer room\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "StaplerSupply-0", "prompt": "Check every printer room for a stapler, and come back and tell me which ones do not have a stapler.", "tests": [{"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "printer room 1"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [{"label": "stapler", "location": "living room"}], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}, {"state": {"locations": ["printer room 1", "living room", "printer room 2", "printer room 3", "start_loc"], "objects": [], "interactive_agents": [], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"printer room 1\", _).\n:- not t_go_to(\"printer room 2\", _).\n:- not t_go_to(\"printer room 3\", _).\n:- t_go_to(X, T), @contains_any(X, \"printer\", \"start_loc\") = 0.\n:- t_is_in_room(X, _), X!=\"stapler\".\n \n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 2\", \"not/no/dont\") = 0.\n\n:- t_say(X, _), @contains_all(X, \"stapler\", \"printer room 3\", \"not/no/dont\") = 0.\n:- t_say(X, _), @contains_all(X, \"living\", \"not/no/dont\") = 1.\n:- not at(\"robot\", \"start_loc\", timeout).\n\n:- not t_go_to(_,_).\n:- not t_say(_,_).\n:- not t_is_in_room(_,_).\n        \n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_stapler = []\n    for room in list_of_rooms:\n        if \"printer\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"stapler\"):\n            room_without_stapler.append(room)\n    go_to(start_loc)\n    if len(room_without_stapler) > 0:\n        message = \"\"\n        for room in room_without_stapler:\n            message += room + \", \"\n        message += \"do not have a stapler\"\n    else:\n        message = \"all printer rooms have a stapler\"\n    say(message)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me to the main conference room\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university. Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)\n    go_to(start_loc)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "ElevatorTour-0", "prompt": "Go to the elevator. Wait until someone shows up and ask them if they are here for the tour. If yes, welcome them to the university, ask them to follow you, and take them to the main conference room. If not, wait for the next person. When you get to the conference room, say you have arrived at the conference room and also say enjoy your visit here!", "tests": [{"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["yes"]}, {"name": "", "location": "elevator", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- not robot_follow.\n:- not robot_welcome.\n:- not robot_enjoy_visit."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "elevator", "answers": ["no"]}, {"name": "", "location": "elevator", "answers": ["no"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- not robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}, {"state": {"locations": ["elevator", "main conference room", "start_loc"], "objects": [], "interactive_agents": [{"name": "person", "location": "start_loc", "answers": ["yes"]}, {"name": "", "location": "start_loc", "answers": ["yes"]}], "robot_location": "start_loc"}, "test": "\n\n:- not t_go_to(\"elevator\", _).\n\nrobot_ask_tour :- at(\"robot\", \"elevator\", T), at(P, \"elevator\", T), P != \"robot\",\n    t_ask(P, X, _, T), @contains(X, \"tour\") = 1.\n \nrobot_welcome :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"welcome\", \"university\") = 1.\n\nrobot_follow :- replied(_,\"yes\",T), t_say(X, T),\n            @contains_all(X, \"follow\") = 1, t_go_to(\"main conference room\", T2),\n            T <= T2.\n   \nrobot_enjoy_visit :- at(\"robot\", \"main conference room\", T), \n                t_say(X, T), @contains_all(X, \"enjoy\", \"visit\") = 1.\n\n\n:- robot_ask_tour.\n:- robot_follow.\n:- robot_welcome.\n:- robot_enjoy_visit.\n:- not at(\"robot\", \"elevator\", timeout)."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"elevator\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Are you here for the tour?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                say(\"Welcome to the university! Please follow me.\")\n                go_to(\"main conference room\")\n                say(\"We have arrived at the main conference room. Enjoy your visit here!\")\n                break\n        time.sleep(1)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark wants to leave at \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark is leaving at \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "MovieMessenger-0", "prompt": "Ask Sally in her office if she wants to go to the cinema with Mark. Go to Mark\u2019s office and tell him Sally\u2019s answer. If Sally says yes, ask Mark whether he wants to leave at 4PM, 5PM, or 6PM - then go tell Sally what time Mark is leaving.", "tests": [{"state": {"locations": ["sally's office", "mark's office"], "interactive_agents": [{"name": "sally", "location": "sally's office", "answers": ["yes"]}, {"name": "mark", "location": "mark's office", "answers": ["5pm"]}], "objects": [], "robot_location": "sally office"}, "test": "\n:- not t_go_to(\"mark's office\", 2).\n% Robot interacts with Mark in step 1. I am not bothering to fully spell this out.\n:- not t_go_to(\"sally's office\", 5).\n% Since we don't check that Mark says 5pm, we could in fact have a mind-reading\n% robot. It is more likely that the robot has a successful interaction with Mark\n% in Step 1.\n:- t_say(X, 6), @contains_all(X, \"5pm\") = 0.\n\n"}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    go_to(\"Sally's office\")\n    response = ask(\"Sally\", \"Do you want to go to the cinema with Mark?\", [\"Yes\", \"No\"])\n    go_to(\"Mark's office\")\n    say(\"Sally said: \" + response)\n    if response == \"Yes\":\n        response = ask(\"Mark\", \"What time do you want to leave?\", [\"4PM\", \"5PM\", \"6PM\"])\n        go_to(\"Sally's office\")\n        say(\"Mark said: \" + response)"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies.\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"offices\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
{"name": "HalloweenList-0", "prompt": "Go to every office, and if there is anyone there, ask if they'd like a chocolate, caramel, or gummy. Come back and tell me how many of each we need to buy.", "tests": [{"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["chocolate"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_0."}, {"state": {"locations": ["sally's office", "mark's office", "cindy's office", "start_loc"], "interactive_agents": [{"name": "person", "location": "sally's office", "answers": ["chocolate"]}, {"name": "person", "location": "mark's office", "answers": ["gummy"]}], "objects": [], "robot_location": "start_loc"}, "test": "\n:- not at(\"robot\", \"start_loc\", timeout).\nconstr_1 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"1\") = 0.\nconstr_0 :- t_say(X, T), @contains_all(X, \"chocolates\", \"gummies\", \"2\") = 0.\n\nconstr_1."}], "completion_settings": {"temperature": 0.2, "top_p": 0.95, "max_tokens": 256, "prompt_prefix": "\"\"\"Robot task programs.\n\nRobot task programs may use the following functions:\nget_current_location()\nget_all_rooms()\nis_in_room()\ngo_to(location)\nask(person, question, options)\nsay(message)\n\nRobot tasks are defined in named functions, with docstrings describing the task.\n\"\"\"\n\n# Get the current location of the robot.\ndef get_current_location() -> str:\n    ...\n\n# Get a list of all rooms.\ndef get_all_rooms() -> list[str]:\n    ...\n\n# Check if an object is in the current room.\ndef is_in_room(object : str) -> bool:\n    ...\n\n# Go to a specific named location, e.g. go_to(\"kitchen\"), go_to(\"Arjun's office\"), go_to(\"Jill's study\").\ndef go_to(location : str) -> None:\n    ...\n\n# Ask a person a question, and offer a set of specific options for the person to respond. Returns the response selected by the person.\ndef ask(person : str, question : str, options: list[str]) -> str:\n    ...\n\n# Say the message out loud.\ndef say(message : str) -> None:\n    ...\n\n# Go to Arjun's office, ask him if he is ready to head out, and come back and tell me what he said\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"Arjun's office\")\n    response = ask(\"Arjun\", \"Are you ready to go?\", [\"Yes\", \"No\"])\n    go_to(start_loc)\n    say(\"Arjun said: \" + response)\n\n# Ask Alice if she needs 1, 2, or 3 staplers, and then go to the supply room and tell them how many she needs.\ndef task_program():\n    go_to(\"Alice's office\")\n    response = ask(\"Alice\", \"How many staplers do you need?\", [\"1\", \"2\", \"3\"])\n    go_to(\"supply room\")\n    say(\"Alice needs \" + str(response) + \" staplers\")\n\n# Check if there is a red marker in the main office, and if so, tell Eve that there is a marker there. If not, go to the supply room and tell them that the main office needs a red marker.\ndef task_program():\n    go_to(\"main office\")\n    red_marker_found = is_in_room(\"red marker\")\n    if red_marker_found:\n        go_to(\"Eve's office\")\n        say(\"There is a red marker in the main office\")\n    else:\n        go_to(\"supply room\")\n        say(\"The main office needs a red marker\")\n\n# Check all classrooms if there is a whiteboard. Go to Aiden's office to tell him which room does not have a whiteboard. Finally, come back and tell me task is completed.\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    room_without_whiteboard = []\n    for room in list_of_rooms:\n        if \"classrooms\" not in room:\n            continue\n        go_to(room)\n        if not is_in_room(\"whiteboard\"):\n            room_without_whiteboard.append(room)\n    go_to(\"Aiden's office\")\n    if len(room_without_whiteboard) > 0:\n        message = \"\"\n        for room in room_without_whiteboard:\n            message += room + \", \"\n        message += \"do not have a whiteboard\"\n    else:\n        message = \"all classrooms have a whiteboard\"\n    say(message)\n    go_to(start_loc)\n    say(\"task is completed\")\n\n# Go to the kitchen and wait for someone to show up. When someone shows up, ask them to place the diet coke from the fridge in your basket, and bring it here\ndef task_program():\n    start_loc = get_current_location()\n    go_to(\"kitchen\")\n    while True:\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Could you please place the diet coke from the fridge in my basket?\", [\"Yes\", \"No\"])\n            if response == \"Yes\":\n                break\n        time.sleep(1)\n    go_to(start_loc)\n\n# ", "stop_sequences": ["\ndef", "\nclass", "print(", "import "]}, "completion": "\ndef task_program():\n    start_loc = get_current_location()\n    list_of_rooms = get_all_rooms()\n    chocolates = 0\n    caramels = 0\n    gummies = 0\n    for room in list_of_rooms:\n        if \"office\" not in room:\n            continue\n        go_to(room)\n        if is_in_room(\"person\"):\n            response = ask(\"\", \"Would you like a chocolate, caramel, or gummy?\", [\"Chocolate\", \"Caramel\", \"Gummy\"])\n            if response == \"Chocolate\":\n                chocolates += 1\n            elif response == \"Caramel\":\n                caramels += 1\n            elif response == \"Gummy\":\n                gummies += 1\n    go_to(start_loc)\n    say(\"We need to buy \" + str(chocolates) + \" chocolates, \" + str(caramels) + \" caramels, and \" + str(gummies) + \" gummies\")"}
