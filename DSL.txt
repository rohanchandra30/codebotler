Consider a robot capable of executing the following functions:

# Get the current location of the robot.
def get_current_location() -> str

# Get a list of all rooms in the house.
def get_all_rooms() -> List[str]

# Check if an object is in the current room.
def is_in_room(object : str) -> bool

# Go to a specific named location, e.g. go_to("kitchen"), go_to("Arjun's
# office"), go_to("Jill's study"). Immediate successive calls to go_to() can be
# optimized to avoid unnecessary movement - e.g. go_to("kitchen"); go_to("living
# room"); go_to("dining room") can be optimized to go_to("dining room").
def go_to(location : str) -> None

# Ask a person a question, and offer a set of specific options for the person to
# respond. Return with the response selected by the person.
def ask(person : str, question : str, options: Optional[List[str]]) -> str

# Say the message out loud. Make sure you are either in a room with a person, or
# at the starting location before calling this function.
def say(message : str) -> None

Here are some examples:
Example 1:
Prompt: Go to Mark's office. Ask him if he's free today at 3:00 pm. Come back to Yash's office and tell him what Mark said.
Program:
go_to("Mark's office")
response = ask("Mark", "Are you free today at 3:00 pm?", ["Yes", "No"])
go_to("Yash's office")
say("Mark said: " + response)

Prompt: "Go to the pantry, and see if any of the following are there: rice, crackers, baking powder, flour. Come back and tell me what all are missing."
Program:
start_loc = get_current_location()
go_to("pantry")
missing_items = []
if not is_in_room("rice"):
    missing_items.append("rice")
if not is_in_room("crackers"):
    missing_items.append("crackers")
if not is_in_room("baking powder"):
    missing_items.append("baking powder")
if not is_in_room("flour"):
    missing_items.append("flour")
go_to(start_loc)

if missing_items:
    say("The following items are missing from the pantry: " + ", ".join(missing_items))
else:
    say("All items are present in the pantry.")

Example 3:
Prompt: Go to Mark's office. Ask him if he's free today at 3:00 pm. Come back to Yash's office and tell him what Mark said.
Program:
go_to("Mark's office")
response = ask("Mark", "Are you free today at 3:00 pm?", ["Yes", "No"])
go_to("Yash's office")
say("Mark said: " + response)

Example 4:
Prompt: Go to Peter's office and ask him if he needs a stapler or a ruler, then check if it exists in the mail room, and come back and tell me what Peter wanted, and if it is in the mailroom.
Program:
start_loc = get_current_location()
go_to("Peter's office")
response = ask("Peter", "Do you need a stapler or a ruler?", ["Stapler", "Ruler"])
go_to("mail room")
if is_in_room(response):
    go_to(start_loc)
    say("Peter wanted a " + response + ", and it is in the mail room")
else:
    go_to(start_loc)
    say("Peter wanted a " + response + ", but it is not in the mail room")

Example 5:
Prompt: Search all the rooms for an apple. If you find the apple, tell me where it is. Otherwise, tell me that there isn't an apple in any of the rooms.
Program:
starting_location = get_current_location()
apple_location = None
for room in get_all_rooms():
    go_to(room)
    if is_in_room("apple"):
        apple_location = room
        break
go_to(starting_location)
if apple_location:
    say("The apple is in the " + apple_location)
else:
    say("The apple isn't in any of the rooms")


Example 6:
Prompt: Keep asking Yash if he wants to go make lunch. When he says yes, ask him to follow you and go to the kitchen.
Program:
while True:
    response = ask("Yash", "Do you want to make lunch?", ["Yes", "No"])
    if response == "Yes":
        break
say("Follow me")
go_to("kitchen")

Make sure all possible re-wordings of the prompts map to the same code.

Given a natural language prompt, write a simple program to perform the given task using Python syntax.

Prompt: Check if there are any staplers in the house, and come back and tell me if there are any, and if so, where
Program: 